{
  "version": 3,
  "sources": ["../src/wasi.ts", "../src/index.ts"],
  "sourcesContent": ["export type WasiSnapshotPreview1 = {\n  args_get?(argv_ptr: number, argv_buf_ptr: number): number;\n  args_sizes_get?(argc_ptr: number, argv_buf_size_ptr: number): number;\n  fd_write?(fd: number, ciovs_ptr: number, ciovs_len: number, retptr0: number): number;\n  clock_time_get?(id: number, _: bigint, retptr0: number): number;\n  environ_sizes_get?(env_ptr: number, env_buf_size_ptr: number): number;\n};\n\nconst Result = {\n  SUCCESS: 0, // No error occurred. System call completed successfully.\n};\n\nexport function args_get(mem: WebAssembly.Memory, args: string[], argv_ptr: number, argv_buf_ptr: number): number {\n  const view = new DataView(mem.buffer);\n  for (const argument of args) {\n    view.setUint32(argv_ptr, argv_buf_ptr, true);\n    argv_ptr += 4;\n\n    const data = new TextEncoder().encode(`${argument}\\0`);\n    const buffer = new Uint8Array(\n      mem.buffer,\n      argv_buf_ptr,\n      data.byteLength\n    );\n    buffer.set(data);\n    argv_buf_ptr += data.byteLength;\n  }\n  return Result.SUCCESS;\n}\n\nexport function args_sizes_get(mem: WebAssembly.Memory, args: string[], argc_ptr: number, argv_buf_size_ptr: number): number {\n  const totalByteLength = args.reduce((acc, value) => {\n    return acc + new TextEncoder().encode(`${value}\\0`).byteLength;\n  }, 0);\n\n  const view = new DataView(mem.buffer);\n  view.setUint32(argc_ptr, args.length, true);\n  view.setUint32(argv_buf_size_ptr, totalByteLength, true);\n\n  return Result.SUCCESS;\n}\n\nfunction readIOVectors(\n  view: DataView,\n  iovs_ptr: number,\n  iovs_len: number\n): Array<Uint8Array> {\n  let result = Array<Uint8Array>(iovs_len);\n\n  for (let i = 0; i < iovs_len; i++) {\n    const bufferPtr = view.getUint32(iovs_ptr, true);\n    iovs_ptr += 4;\n\n    const bufferLen = view.getUint32(iovs_ptr, true);\n    iovs_ptr += 4;\n\n    result[i] = new Uint8Array(view.buffer, bufferPtr, bufferLen);\n  }\n  return result;\n}\n\nexport function fd_write(mem: WebAssembly.Memory, output: string[], _fd: number, ciovs_ptr: number, ciovs_len: number, retptr0: number): number {\n  const view = new DataView(mem.buffer);\n  const iovs = readIOVectors(view, ciovs_ptr, ciovs_len);\n  const decoder = new TextDecoder();\n\n  let bytesWritten = 0;\n\n  let result = Result.SUCCESS;\n  for (const iov of iovs) {\n    if (iov.byteLength === 0) {\n      continue;\n    }\n    output.push(decoder.decode(iov));\n    bytesWritten += iov.byteLength;\n  }\n\n  view.setUint32(retptr0, bytesWritten, true);\n  return result;\n}\n\n// Always returns 0\nexport function clock_time_get(mem: WebAssembly.Memory, _id: number, _: bigint, retptr0: number): number {\n  const view = new DataView(mem.buffer);\n  view.setBigUint64(retptr0, BigInt(0), true);\n  return Result.SUCCESS;\n}\n\nexport function environ_sizes_get(mem: WebAssembly.Memory, env_ptr: number, env_buf_size_ptr: number): number {\n  const totalByteLength = 0;\n  const view = new DataView(mem.buffer);\n  view.setUint32(env_ptr, 0, true);\n  view.setUint32(env_buf_size_ptr, totalByteLength, true);\n  return Result.SUCCESS;\n}\n", "import { WasiSnapshotPreview1, args_get, args_sizes_get, clock_time_get, environ_sizes_get, fd_write } from \"./wasi\";\n\ntype TwelfExports = {\n  memory: WebAssembly.Memory;\n  twelf_open(argc: number, argv: number): void;\n  allocate(size: number): number;\n  execute(): void;\n};\n\nfunction debug(_x: string): void {\n  // console.log(x);\n}\n\nasync function mkTwelfService(wasmLoc: string): Promise<TwelfService> {\n  const twelfWasm = getWasm(wasmLoc);\n\n  let mem: WebAssembly.Memory | undefined;\n  const output: string[] = [];\n  const argv: string[] = ['twelf'];\n  const imports: { wasi_snapshot_preview1: WebAssembly.ModuleImports & WasiSnapshotPreview1 } = {\n    wasi_snapshot_preview1: {\n      args_get: (...args) => args_get(mem!, argv, ...args),\n      args_sizes_get: (...args) => args_sizes_get(mem!, argv, ...args),\n      clock_time_get: (...args) => clock_time_get(mem!, ...args),\n      environ_sizes_get: (...args) => environ_sizes_get(mem!, ...args),\n      environ_get: () => { debug('environ_get'); },\n      proc_exit: () => { debug('proc_exit'); throw new Error(\"proc_exit called, probably shouldn't happen\"); },\n      fd_close: () => { debug('fd_close'); },\n      fd_fdstat_get: () => { debug('fd_fdstat_get'); },\n      fd_fdstat_set_flags: () => { debug('fd_fdstat_set_flags'); },\n      fd_filestat_get: () => { debug('fd_filestat_get'); },\n      fd_pread: () => { debug('fd_pread'); },\n      fd_prestat_dir_name: () => { debug('fd_prestat_dir_name'); },\n      fd_prestat_get: () => { debug('fd_prestat_get'); },\n      fd_read: () => { debug('fd_read'); },\n      fd_seek: () => { debug('fd_seek'); },\n      fd_write: (...args) => { debug('fd_write'); return fd_write(mem!, output, ...args); },\n\n      // Paths\n      path_filestat_get: () => { debug('path_filestat_get'); },\n      path_open: () => { debug('path_open'); },\n    }\n  };\n\n  const source = await WebAssembly.instantiate(await twelfWasm, imports);\n  const exports = (source.instance.exports as TwelfExports);\n  // give import implementations the ability to refer to memory\n  mem = exports.memory;\n  exports.twelf_open(0, 0);\n\n  return new TwelfService(source.instance, output);\n}\n\nclass TwelfService {\n\n  constructor(public instance: WebAssembly.Instance, public output: string[]) { }\n\n  async exec(input: string) {\n    this.output.splice(0); // Erase output\n\n    const exports = this.instance.exports as TwelfExports;\n    const mem = exports.memory;\n    try {\n      const data = new TextEncoder().encode(input);\n      const length = data.length;\n      const inputBuf = exports.allocate(length);\n      const buffer = new Uint8Array(\n        mem.buffer,\n        inputBuf,\n        length,\n      );\n      buffer.set(data);\n      exports.execute();\n    }\n    catch (e) {\n      console.error(e);\n    }\n\n    (document.getElementById('twelf-response') as HTMLTextAreaElement).value =\n      this.output.join('');\n  }\n}\n\nasync function getWasm(url: string): Promise<ArrayBuffer> {\n  return (await fetch(url)).arrayBuffer();\n}\n\nasync function init() {\n  if (window.location.hash) {\n    setText(atob(decodeURIComponent(window.location.hash.substring(1))));\n  }\n\n  (document.getElementById('twelf-response') as HTMLTextAreaElement).value = '';\n  const twelfService = await mkTwelfService(\"assets/twelf.wasm\");\n\n  // Hide loading indicator\n  document.getElementById('loading-indicator')!.classList.add('hidden');\n\n  function getText(): string {\n    return (document.getElementById('primary-view') as HTMLTextAreaElement).value;\n  }\n\n  function setText(text: string): void {\n    (document.getElementById('primary-view') as HTMLTextAreaElement).value = text;\n  }\n\n  const checkButton = document.getElementById('check-button') as HTMLButtonElement;\n  const exec = () => {\n    twelfService.exec(getText());\n  }\n  checkButton.onclick = exec;\n\n  const shareButton = document.getElementById('share-button') as HTMLButtonElement;\n  shareButton.onclick = () => {\n    window.location.href = window.location.href.split('#')[0] + '#' + encodeURIComponent(btoa(getText()));\n  };\n  document.addEventListener('keydown', (e) => {\n    if (e.ctrlKey && e.key == 'Enter') {\n      exec();\n    }\n  });\n}\n\ninit();\n"],
  "mappings": "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",
  "names": []
}
